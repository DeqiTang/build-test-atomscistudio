name: Build for Windows with MinGW
on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]
jobs:
  build-for-windows:
    runs-on: [windows-2019]
    strategy:
      matrix:
        qt_version: [6.2.1]
        qt_arch: [win64_mingw81]
    steps: 
      - name: Caching vcpkg binary caches
        id: cache-vcpkg
        uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\AppData\Local\vcpkg\archives
          key: ${{ runner.os }}-cache-vcpkg-try-6
      - name: Install MinGW
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.14.0
        with:
          version: ${{ matrix.qt_version }}
          host: 'windows'
          target: 'desktop'
          arch: ${{ matrix.qt_arch }}
          aqtversion: '==2.0.6'
          modules: 'qt3d'
      - name: Setup opencascade
        id: install-opencascade
        run: |
          vcpkg install opencascade:x64-windows --binarysource=default,readwrite
          $prefix_ = "C:/vcpkg/packages/opencascade_x64-windows"
          #vcpkg install brotli:x64-windows bzip2:x64-windows freetype:x64-windows libpng:x64-windows zlib:x64-windows
          #vcpkg install tcl:x64-windows
          #$prefix_ = "C:/Softwares/opencascade"
          
          #Invoke-WebRequest -Uri https://codeload.github.com/Open-Cascade-SAS/OCCT/tar.gz/refs/tags/V7_6_2 -OutFile OCCT.tar.gz
          #tar -xf OCCT.tar.gz
          #cmake OCCT-7_6_2 -B build_opencascade -DCMAKE_INSTALL_PREFIX="$prefix_" -G "MinGW Makefiles" -DCMAKE_PREFIX_PATH="C:/vcpkg/brotli_x64-windows;C:/vcpkg/bzip2_x64-windows;C:/vcpkg/freetype_x64-windows;libpng_x64-windows;zlib_x64-windows" -DBUILD_LIBRARY_TYPE=Shared 
          #cmake --build build_opencascade --config Release  
          #cmake --install build_opencascade
          echo "::set-output name=prefix::${prefix_}"
        shell: powershell  
      - name: Install Boost
        uses: MarkusJx/install-boost@v2.1.0
        id: install-boost
        with:
          boost_version: 1.78.0
          platform_version: 2019
          boost_install_dir: 'C:/Program Files (x86)/'
          toolset: mingw
      - name: Download yaml-cpp
        shell: powershell
        run: |
          Invoke-WebRequest -Uri https://github.com/jbeder/yaml-cpp/archive/refs/tags/yaml-cpp-0.7.0.tar.gz -OutFile yaml-cpp-0.7.0.tar.gz
          tar -xvf yaml-cpp-0.7.0.tar.gz
      - name: Build yaml-cpp
        id: install-yaml-cpp
        shell: powershell
        run: |
          # In the case of yaml-cpp the install path should contain no space
          # So, deafult C:/Program Files (x86)/YAML_CPP is not working for later
          # finding of yaml-cpp using cmake PkgConfig
          #cmake yaml-cpp-yaml-cpp-0.7.0 -B build_yaml_cpp -G 'MinGW Makefiles' -DYAML_BUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX='C:/Softwares/yaml-cpp'
          $prefix_ = "C:/Softwares/yaml-cpp"
          git clone https://github.com/jbeder/yaml-cpp
          cmake yaml-cpp -B build_yaml_cpp -G 'MinGW Makefiles' -DYAML_BUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX="$prefix_"
          cmake --build build_yaml_cpp --parallel 4
          cmake --install build_yaml_cpp
          echo "::set-output name=prefix::$prefix_"
      - name: Download OpenSSL
        shell: powershell
        run: |
          Invoke-WebRequest -Uri https://github.com/openssl/openssl/archive/refs/tags/openssl-3.0.1.tar.gz -OutFile openssl-3.0.1.tar.gz
          tar -xvf openssl-3.0.1.tar.gz
      - name: Build OpenSSL
        shell: powershell
        run: |
          choco install openssl
          choco upgrade openssl.light
      - name: Download libssh2
        shell: powershell 
        run: |
          Invoke-WebRequest -Uri https://github.com/libssh2/libssh2/releases/download/libssh2-1.10.0/libssh2-1.10.0.tar.gz -OutFile libssh2-1.10.0.tar.gz
          tar -xvf libssh2-1.10.0.tar.gz
      - name: Install libssh2
        id: install-libssh2
        shell: powershell 
        run: |
          $prefix_ = "C:/Softwares/libssh2"
          cmake libssh2-1.10.0 -B build_libssh2 -G 'MinGW Makefiles' -DCMAKE_INSTALL_PREFIX="$prefix_"
          cmake --build build_libssh2 --parallel 4
          cmake --install build_libssh2
          echo "::set-output name=prefix::$prefix_"
      - name: Download armadillo
        shell: powershell
        run: |
          Invoke-WebRequest -Uri https://jztkft.dl.sourceforge.net/project/arma/armadillo-10.8.2.tar.xz -OutFile armadillo-10.8.2.tar.xz
      - name: Extract armadillo
        shell: bash
        # tar in powershell can deal with tar.gz
        # but tar.xz need to be extracted in bash 
        run: |
          tar -xvf armadillo-10.8.2.tar.xz
      - name: Install armadillo
        id: install-armadillo
        run: |
          $prefix_ = "C:/Softwares/armadillo"

          cmake armadillo-10.8.2 -B build_armadillo -G 'MinGW Makefiles' -DCMAKE_INSTALL_PREFIX="$prefix_" 
          cmake --build build_armadillo
          cmake --install build_armadillo
          echo "::set-output name=prefix::$prefix_"
        shell: powershell
      - name: Install atomsciflow
        id: install-atomsciflow
        run: |
          $prefix_ = "C:/Softwares/atomsciflow"

          git clone https://github.com/deqitang/build-test-atomsciflow.git
          cmake build-test-atomsciflow -B build_atomsciflow -DBUILD_CMD=OFF -DBUILD_TEST=OFF -G 'MinGW Makefiles' -DCMAKE_INSTALL_PREFIX="$prefix_" -DCMAKE_PREFIX_PATH="${{ steps.install-armadillo.outputs.prefix }};${ steps.install-libssh2.outputs.prefix }" -DYAML_CPP_PKGCONFIG_DIR="${{ steps.install-yaml-cpp.outputs.prefix }}/share/pkgconfig"
          cmake --build build_atomsciflow --config Release 
          cmake --install build_atomsciflow
          echo "::set-output name=prefix::$prefix_"
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
        shell: powershell
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Build for Windows with MinGW
        run: |
          cmake -B build_atomscistudio -G 'MinGW Makefiles' -DCMAKE_PREFIX_PATH='${{ steps.install-armadillo.outputs.prefix }};${{ steps.install-atomsciflow.outputs.prefix }}' -DYAML_CPP_PKGCONFIG_DIR='${{ steps.install-yaml-cpp.outputs.prefix }}/share/pkgconfig'
          cmake --build build_atomscistudio --config Release
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}  
        shell: powershell
      - name: packaging
        id: packaging
        shell: powershell
        env:
          archive_name: atomscistudio-${{ matrix.qt_version }}-${{ matrix.qt_arch }}
          executable: atomscistudio
        run: |
          New-Item -ItemType Directory ${env:archive_name}
          Copy-Item build_atomscistudio\${env:executable}'.exe' ${env:archive_name}\${env:executable}'.exe'
          windeployqt ${env:archive_name}\${env:executable}'.exe' --verbose=2 --compiler-runtime
          ldd ${env:archive_name}\${env:executable}'.exe'
          Copy-Item README.md ${env:archive_name}\README.md
          Copy-Item LICENSE ${env:archive_name}\LICENSE
          Copy-Item NOTICE ${env:archive_name}\NOTICE
          New-Item -ItemType Directory ${env:archive_name}\third_party\license
          Copy-Item third_party\license\* ${env:archive_name}\third_party\license\
          Copy-Item 'C:/Program Files/OpenSSL-Win64/libcrypto-1_1-x64.dll' ${env:archive_name}\
          Copy-Item 'C:/Program Files/OpenSSL-Win64/libssl-1_1-x64.dll' ${env:archive_name}\
          Copy-Item 'C:/Softwares/yaml-cpp/bin/libyaml-cpp.dll' ${env:archive_name}\
          Compress-Archive -Path ${env:archive_name} ${env:archive_name}'.zip'
          $name = ${env:archive_name}
          echo "::set-output name=package_name::$name"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.packaging.outputs.package_name }}.zip
          path: ${{ steps.packaging.outputs.package_name }}.zip
      - name: Upload Release
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.packaging.outputs.package_name }}.zip
          asset_name: ${{ steps.packaging.outputs.package_name }}.zip
          tag: ${{ github.ref }}
          overwrite: true 
