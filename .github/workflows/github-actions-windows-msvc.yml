# =======================================================================================
# Visual Studio Community version is friendly to open source projects.
# The eula indicates it can be used for the development of open source softwares.
# Many open source softwares provide binaries built with Visual Studio Community version,
# including Official CPython package for Windows.
# So here, Visual Studio Community version is used to build and test atomscistudio.
# =======================================================================================
name: Build for Windows using MSVC community version
on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]
jobs:
  build-for-windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]
        qt_version: ["6.2.2"]
        qt_arch: ["win64_msvc2019_64"]
    env:
      executable: atomscistudio
    steps:
      # - name: Caching MSVC community version
      #   id: cache-msvc-community
      #   uses: actions/cache@v3  
      #   with:
      #     path: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community"
      #     key: ${{ runner.os }}-cache-msvc-community-try-1 
      # - name: Set up Visual Studio 2019 community version
      #   if: steps.cache-msvc-community.outputs.cache-hit != 'true'
      #   run: |
      #     choco install visualstudio2019community --package-parameters "--allWorkloads --includeRecommended --passive"
      #     & "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Auxiliary/Build/vcvars64.bat"
      #   shell: powershell
      - name: Install ninja
        uses: seanmiddleditch/gha-setup-ninja@master
        with:
          destination: "C:/Softwares/ninja"          
      - name: Caching vcpkg binary caches
        id: cache-vcpkg
        uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\AppData\Local\vcpkg\archives
          key: ${{ runner.os }}-cache-vcpkg-try-7
      - name: Install Open CASCADE
        id: install-opencascade
        run: |
          # $env:VCPKG_LIBRARY_LINKAGE = "dynamic"
          # $env:VCPKG_ENV_PASSTHROUGH = "True"
          # $env:VCPKG_KEEP_ENV_VARS = "VCPKG_LIBRARY_LINKAGE"
          # vcpkg install opencascade:x64-windows --binarysource=default,readwrite
          # $prefix_ = "C:/vcpkg/packages/opencascade_x64-windows"
          # ls "C:/vcpkg/packages/opencascade_x64-windows/lib"

          # #vcpkg install brotli:x64-windows bzip2:x64-windows zlib:x64-windows libpng:x64-windows 
          # vcpkg install freetype:x64-windows
          # vcpkg install tcl:x64-windows
          # ls "C:/vcpkg/packages/freetype_x64-windows"
          # ls "C:/vcpkg/packages/tcl_x64-windows"

          $prefix_ = "C:/Softwares/opencascade"
          Invoke-WebRequest -Uri https://codeload.github.com/Open-Cascade-SAS/OCCT/tar.gz/refs/tags/V7_6_2 -OutFile OCCT.tar.gz
          tar -xf OCCT.tar.gz

          Invoke-WebRequest -Uri https://old.opencascade.com/sites/default/files/private/occt/3rdparty/tcltk-86-64.zip -OutFile tcltk-86-64.zip
          unzip tcltk-86-64.zip
          New-Item -ItemType Directory "C:/opencascade_3rdparty_dir"
          Copy-Item tcltk-86-64 "C:/opencascade_3rdparty_dir/tcltk-86-64"
           
          Invoke-WebRequest -Uri https://old.opencascade.com/sites/default/files/private/occt/3rdparty/freetype-2.5.5-vc14-64.zip -OutFile freetype-2.5.5-vc14-64.zip
          unzip freetype-2.5.5-vc14-64.zip
          Copy-Item freetype-2.5.5-vc14-64 "C:/opencascade_3rdparty_dir/freetype-2.5.5-vc14-64"

          cmake OCCT-7_6_2 -B build_opencascade -DCMAKE_INSTALL_PREFIX="$prefix_" -DBUILD_LIBRARY_TYPE=Shared -D3RDPARTY_DIR="opencascade_3rdparty_dir" -DCMAKE_PREFIX_PATH="C:/vcpkg/brotli_x64-windows;C:/vcpkg/bzip2_x64-windows;C:/vcpkg/freetype_x64-windows;libpng_x64-windows;C:/vcpkg/zlib_x64-windows" -D3RDPARTY_TCL_DIR="C:/opencascade_3rdparty_dir/tcltk-86-64" -D3RDPARTY_TCL_INCLUDE_DIR="C:/opencascade_3rdparty_dir/tcltk-86-64/include" -D3RDPARTY_TCL_LIBRARY_DIR="C:/opencascade_3rdparty_dir/tcltk-86-64/lib" -D3RDPARTY_TK_DIR="C:/opencascade_3rdparty_dir/tcltk-86-64" -D3RDPARTY_TK_INCLUDE_DIR="C:/opencascade_3rdparty_dir/tcltk-86-64/include" -D3RDPARTY_TK_LIBRARY_DIR="C:/opencascade_3rdparty_dir/tcltk-86-64/lib" -D3RDPARTY_FREETYPE_DIR="C:/opencascade_3rdparty_dir/freetype-2.5.5-vc14-64" -D3RDPARTY_FREETYPE_INCLUDE_DIR="C:/opencascade_3rdparty_dir/freetype-2.5.5-vc14-64/include" -D3RDPARTY_FREETYPE_LIBRARY_DIR="C:/opencascade_3rdparty_dir/freetype-2.5.5-vc14-64/lib"
          
          cmake --build build_opencascade --config Release  
          cmake --install build_opencascade

          echo "::set-output name=prefix::${prefix_}"
        shell: powershell
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.14.0
        with:
          host: 'windows'
          version: ${{ matrix.qt_version }} 
          arch: ${{ matrix.qt_arch }}
          target: 'desktop'
          aqtversion: '==2.1.0'
          modules: 'qt3d'
      - name: Install Boost
        id: install-boost
        uses: MarkusJx/install-boost@v2.2.0
        with:
          boost_version: 1.78.0
          platform_version: 2019
          boost_install_dir: "C:/Softwares"
          toolset: msvc
      - name: Install googletest
        id: install-gtest
        run: |
          Invoke-WebRequest -Uri https://github.com/google/googletest/archive/refs/tags/release-1.11.0.tar.gz -OutFile release-1.11.0.tar.gz
          tar -xf release-1.11.0.tar.gz
          $prefix_ = "C:/Softwares/gtest"

          cmake googletest-release-1.11.0 -B build_gtest -G "Visual Studio 16 2019" -A x64
          cmake --build build_gtest --config Release
          cmake --install build_gtest
          echo "::set-output name=prefix::${prefix_}"
      - name: Download yaml-cpp
        shell: powershell
        run: |
          Invoke-WebRequest -Uri https://github.com/jbeder/yaml-cpp/archive/refs/tags/yaml-cpp-0.7.0.tar.gz -OutFile yaml-cpp-0.7.0.tar.gz
          tar -xf yaml-cpp-0.7.0.tar.gz
      - name: Install yaml-cpp
        id: install-yaml-cpp
        run: |
          & "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Auxiliary/Build/vcvars64.bat"
          $prefix_ = "C:/Softwares/yaml-cpp"
          cmake yaml-cpp-yaml-cpp-0.7.0 -B build_yaml_cpp -G "Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX="${prefix_}" -DCMAKE_BUILD_TYPE=Release -DYAML_BUILD_SHARED_LIBS=ON
          cmake --build build_yaml_cpp --config Release --parallel 4 
          cmake --install build_yaml_cpp
          echo "::set-output name=prefix::${prefix_}"
        shell: powershell
      - name: Install OpenSSL
        shell: powershell
        run: |
          choco install openssl
          choco upgrade openssl.light
      - name: Download libssh2
        shell: powershell 
        run: |
          Invoke-WebRequest -Uri https://github.com/libssh2/libssh2/releases/download/libssh2-1.10.0/libssh2-1.10.0.tar.gz -OutFile libssh2-1.10.0.tar.gz
          tar -xf libssh2-1.10.0.tar.gz
      - name: Install libssh2
        id: install-libssh2
        shell: powershell 
        run: |
          & "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Auxiliary/Build/vcvars64.bat"
          $prefix_ = "C:/Softwares/libssh2"
          cmake libssh2-1.10.0 -B build_libssh2 -G "Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX="${prefix_}" -DCMAKE_BUILD_TYPE=Release 
          cmake --build build_libssh2 --config Release --parallel 4
          cmake --install build_libssh2
          echo "::set-output name=prefix::${prefix_}"
      - name: Download armadillo
        shell: powershell
        run: |
          Invoke-WebRequest -Uri https://jztkft.dl.sourceforge.net/project/arma/armadillo-10.8.2.tar.xz -OutFile armadillo-10.8.2.tar.xz
      - name: Extract armadillo
        shell: bash
        run: |
          tar -xf armadillo-10.8.2.tar.xz
      - name: Install armadillo
        id: install-armadillo
        run: |
          & "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Auxiliary/Build/vcvars64.bat"
          $prefix_ = "C:/Softwares/armadillo"
          cmake armadillo-10.8.2 -B build_armadillo -G "Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX="${prefix_}" -DCMAKE_BUILD_TYPE=Release
          cmake --build build_armadillo --config Release
          cmake --install build_armadillo
          echo "::set-output name=prefix::${prefix_}"
        shell: powershell
      - name: Build atomsciflow
        id: install-atomsciflow
        run: |
          & "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Auxiliary/Build/vcvars64.bat"
          $prefix_ = "C:/Softwares/atomsciflow"

          git clone https://github.com/deqitang/build-test-atomsciflow.git
          cmake build-test-atomsciflow -B build_atomsciflow -DBUILD_CMD=OFF -DBUILD_TEST=OFF -G "Visual Studio 16 2019" -DCMAKE_INSTALL_PREFIX="$prefix_" -DCMAKE_PREFIX_PATH="${{ steps.install-armadillo.outputs.prefix }};${{ steps.install-libssh2.outputs.prefix }}" -DYAML_CPP_PKGCONFIG_DIR="${{ steps.install-yaml-cpp.outputs.prefix }}/share/pkgconfig" -DGTEST_ROOT="${{ steps.install-gtest.outputs.prefix }}"
          cmake --build build_atomsciflow --config Release 
          cmake --install build_atomsciflow
          echo "::set-output name=prefix::${prefix_}"
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
        shell: powershell
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Build for Windows with MSVC
        run: |
          cmake -B build_atomscistudio -G 'Visual Studio 16 2019' -DCMAKE_PREFIX_PATH="${{ steps.install-armadillo.outputs.prefix }};${{ steps.install-libssh2.outputs.prefix }};${{ steps.install-opencascade.outputs.prefix }};${{ steps.install-atomsciflow.outputs.prefix }}" -DYAML_CPP_PKGCONFIG_DIR="${{ steps.install-yaml-cpp.outputs.prefix }}/share/pkgconfig"
          cmake --build build_atomscistudio --config Release
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}  
        shell: powershell
      - name: packaging
        id: packaging
        shell: powershell
        env:
          archive_name: atomscistudio-${{ matrix.qt_version }}-${{ matrix.qt_arch }}
        run: |
          New-Item -ItemType Directory ${env:archive_name}
          Copy-Item build_atomscistudio\Release\${env:executable}'.exe' ${env:archive_name}\${env:executable}'.exe'
          windeployqt ${env:archive_name}\${env:executable}'.exe' --verbose=2 --compiler-runtime
          ldd ${env:archive_name}\${env:executable}'.exe'
          Copy-Item README.md ${env:archive_name}\README.md
          Copy-Item LICENSE ${env:archive_name}\LICENSE
          Copy-Item NOTICE ${env:archive_name}\NOTICE
          New-Item -ItemType Directory ${env:archive_name}\third_party\license
          Copy-Item third_party\license\* ${env:archive_name}\third_party\license\
          Copy-Item 'C:/Program Files/OpenSSL-Win64/libcrypto-1_1-x64.dll' ${env:archive_name}\
          Copy-Item 'C:/Program Files/OpenSSL-Win64/libssl-1_1-x64.dll' ${env:archive_name}\
          #Copy-Item 'C:/Softwares/yaml-cpp/bin/libyaml-cpp.dll' ${env:archive_name}\
          Copy-Item 'C:/Softwares/yaml-cpp/bin/yaml-cpp.dll' ${env:archive_name}\
          #Copy-Item "C:/vcpkg/packages/opencascade_x64-windows/lib/TKV3d.dll" ${env:archive_name}\
          #Copy-Item "C:/vcpkg/packages/opencascade_x64-windows/lib/TKTopAlgo.dll" ${env:archive_name}\
          #Copy-Item "C:/vcpkg/packages/opencascade_x64-windows/lib/TKService.dll" ${env:archive_name}\
          #Copy-Item "C:/vcpkg/packages/opencascade_x64-windows/lib/TKPrim.dll" ${env:archive_name}\
          Compress-Archive -Path ${env:archive_name} ${env:archive_name}'.zip'
          $name = ${env:archive_name}
          echo "::set-output name=package_name::$name"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.packaging.outputs.package_name }}.zip
          path: ${{ steps.packaging.outputs.package_name }}.zip
      - name: Upload Release
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.packaging.outputs.package_name }}.zip
          asset_name: ${{ steps.packaging.outputs.package_name }}.zip
          tag: ${{ github.ref }}
          overwrite: true 
